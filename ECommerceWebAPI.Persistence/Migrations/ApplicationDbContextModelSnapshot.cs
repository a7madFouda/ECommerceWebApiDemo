// <auto-generated />
using System;
using ECommerceWebAPI.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceWebAPI.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceWebAPI.Domain.Models.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ECommerceWebAPI.Domain.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Customer_ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Total_Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Customer_ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerceWebAPI.Domain.Models.Entities.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("ECommerceWebAPI.Domain.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 8, 4, 20, 0, 59, 985, DateTimeKind.Utc).AddTicks(6503),
                            Description = "Mouse with USB",
                            IsActive = true,
                            IsArchived = false,
                            IsDeleted = false,
                            Name = "Mouse",
                            Price = 29.989999999999998,
                            Stock = 150
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 8, 4, 20, 0, 59, 985, DateTimeKind.Utc).AddTicks(6505),
                            Description = "Keyboard with USB",
                            IsActive = true,
                            IsArchived = false,
                            IsDeleted = false,
                            Name = "Keyboard",
                            Price = 69.989999999999995,
                            Stock = 100
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 8, 4, 20, 0, 59, 985, DateTimeKind.Utc).AddTicks(6507),
                            Description = "Full HD IPS monitor",
                            IsActive = true,
                            IsArchived = false,
                            IsDeleted = false,
                            Name = "Monitor",
                            Price = 199.99000000000001,
                            Stock = 50
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 8, 4, 20, 0, 59, 985, DateTimeKind.Utc).AddTicks(6509),
                            Description = "No Description",
                            IsActive = true,
                            IsArchived = false,
                            IsDeleted = false,
                            Name = "IPhone 15",
                            Price = 39.990000000000002,
                            Stock = 200
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 8, 4, 20, 0, 59, 985, DateTimeKind.Utc).AddTicks(6511),
                            Description = "Asus Laptop",
                            IsActive = true,
                            IsArchived = false,
                            IsDeleted = false,
                            Name = "Laptop",
                            Price = 24.989999999999998,
                            Stock = 80
                        });
                });

            modelBuilder.Entity("ECommerceWebAPI.Domain.Models.Entities.Order", b =>
                {
                    b.HasOne("ECommerceWebAPI.Domain.Models.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("Customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerceWebAPI.Domain.Models.Entities.OrderProduct", b =>
                {
                    b.HasOne("ECommerceWebAPI.Domain.Models.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceWebAPI.Domain.Models.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceWebAPI.Domain.Models.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerceWebAPI.Domain.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("ECommerceWebAPI.Domain.Models.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
